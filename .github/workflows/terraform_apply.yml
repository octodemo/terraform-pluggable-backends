name: Terraform - create GitHub repository

on:
  workflow_dispatch:
    inputs:
      owner:
        type: string
        default: octodemo
        required: true
        description: The owner of the repository being created

      repository_name:
        type: string
        required: true
        description: The name of the repository to create or update

      backend:
        type: string
        required: true
        default: gcp
        description: The Cloud backend to use for terraform storage, `azure` or `gcp`.


jobs:
  validate:
    name: Validate

    runs-on: ubuntu-20.04

    outputs:
      terraform_backend: ${{ steps.validate.outputs.terraform_backend }}

    steps:
      - name: Validate cloud backend
        id: validate
        uses: actions/github-script@v4
        env:
          backend: ${{ github.event.inputs.backend }}
        with:
          script: |
            const backend = process.env.backend;

            if (backend === 'gcp') {
              core.setOutput('terraform_backend', 'gcs');
            } else if (backend === 'azure') {
              core.setOutput('terraform_backend', 'azurerm');
            } else {
              core.setFailed(`Invalid cloud backend specified '${backend}'. Must be one of 'azure' or 'gcp'`);
            }


  terraform_apply_create_repository:
    name: Terraform Apply - create repository
    runs-on: ubuntu-20.04

    needs:
      - validate

    timeout-minutes: 3

    env:
      TF_VAR_github_owner: ${{ github.event.inputs.owner }}
      TF_VAR_github_repo_name: ${{ github.event.inputs.repository_name }}
      TF_VAR_github_token: ${{ secrets.GHEC_PROVISIONING_PAT }}
      
      TF_VAR_terraform_state_backend: ${{ needs.validate.outputs.terraform_backend }}

      # # Azure specific settings
      # TF_VAR_azure_storage_account_resource_group: ''
      # TF_VAR_azure_storage_account_name: ''

      # # GCP specific settings
      # TF_VAR_gcs_backend_storage_bucket: ''

      # Directory that contains Terraform HCL to run from the checked out sources
      TERRAFORM_WORKING_DIRECTORY: ./terraform

    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2

      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: 1.1.3
          terraform_wrapper: true

      - name: Setup Terragrunt
        uses: peter-murray/terragrunt-github-action@v1.0.0
        with:
          terragrunt_version: 0.35.20

      - name: Sign in to Google Cloud Platform
        if: github.event.inputs.backend == 'gcp'
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          version: 369.0.0
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_TERRAFORM_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      - name: Terraform - init
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: terragrunt init

      - name: Terraform - validate
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: terragrunt validate

      - name: Terraform - plan
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: terragrunt plan

      - name: Terraform - apply
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: terragrunt apply -auto-approve

      - name: Get Repository URL from Terrafom State
        id: terraform_output
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: terraform output -json repository_url